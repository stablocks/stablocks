datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Organization {
  id               String   @id @default(cuid())
  // General information
  name             String
  website          String?
  logo             String?
  email            String?
  address          String?
  addressTwo       String?
  city             String?
  state            String?
  zipCode          Int?
  // Module toggles
  recruiting       Boolean  @default(true)
  crm              Boolean  @default(true)
  marketing        Boolean  @default(true)
  sales            Boolean  @default(true)
  finance          Boolean  @default(true)
  hr               Boolean  @default(true)
  helpdesk         Boolean  @default(true)
  projects         Boolean  @default(true)
  // Chat settings
  chatGreeting     String?
  // Integrations
  plaidAccessToken String?
  // Times
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())
}

model User {
  id              String          @id @default(cuid())
  firstName       String
  middleName      String?
  lastName        String
  email           String          @unique
  otherEmails     String[]
  profileImage    String?
  roles           Role?
  // Organization
  position        String?
  departments     Department[]
  supervisorId    String?
  supervisor      User?           @relation("SupervisorEmployees", fields: [supervisorId], references: [id])
  employees       User[]          @relation("SupervisorEmployees")
  // Payroll
  pay             EmployeePay?
  // Recruiting
  jobs            Job[]
  applications    Application[]
  resume          String?
  // CRM
  contacts        Contact[]
  contactNotes    ContactNote[]
  companies       Company[]
  // Helpdesk
  ticketsCreated  Ticket[]        @relation("UserTicket")
  ticketsAssigned Ticket[]        @relation("AssigneeTicket")
  ticketComments  TicketComment[]
  chatsCreated    Chat[]          @relation("UserChat")
  chatsAssigned   Chat[]          @relation("AssigneeChat")
  chatMessages    ChatMessage[]
  // Project Management
  projects        Project[]
  tasksCreated    Task[]          @relation("UserTask")
  tasksAssigned   Task[]          @relation("AssigneeTask")
  taskComments    TaskComment[]
  // Times
  updatedAt       DateTime        @updatedAt
  createdAt       DateTime        @default(now())
}

model Department {
  id             String       @id @default(cuid())
  name           String
  email          String?
  users          User[]
  department     Department?  @relation("Subdepartments", fields: [departmentId], references: [id])
  departmentId   String?
  subDepartments Department[] @relation("Subdepartments")
  // Times
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())
}

// --------------------
// Finance
// --------------------

model Income {
  id        String   @id @default(cuid())
  name      String
  amount    Float
  date      DateTime
  currency  String
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId Int?     @unique
  // Times
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Invoice {
  id          Int           @id @default(autoincrement())
  contact     Contact       @relation(fields: [contactId], references: [id])
  contactId   String
  currency    String        @default("USD")
  issued      DateTime      @default(now())
  dueDate     DateTime
  sent        Boolean       @default(false)
  paid        Boolean       @default(false)
  description String?
  items       InvoiceItem[]
  income      Income?
  // Times
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
}

model InvoiceItem {
  id          String   @id @default(cuid())
  name        String
  units       Float
  rate        Int
  description String?
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId   Int
  // Times
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Expense {
  id             String           @id @default(cuid())
  plaidId        String           @unique
  name           String
  amount         Float
  date           DateTime
  authorizedDate DateTime?
  currency       String           @default("USD")
  pending        Boolean          @default(false)
  category       ExpenseCategory? @relation(fields: [categoryId], references: [id])
  categoryId     String?
  // Times
  updatedAt      DateTime         @updatedAt
  createdAt      DateTime         @default(now())
}

model PlaidItem {
  id          String @id @default(cuid())
  accessToken String @unique
  itemId      String @unique
}

model ExpenseCategory {
  id        String    @id @default(cuid())
  name      String
  default   Boolean   @default(false)
  expenses  Expense[]
  // Times
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

// --------------------
// HR
// --------------------

model EmployeePay {
  id        String          @id @default(cuid())
  amount    Int
  currency  String          @default("USD")
  type      EmployeePayType @default(salary)
  frequency Frequency       @default(biweekly)
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @unique
  // Times
  updatedAt DateTime        @updatedAt
  createdAt DateTime        @default(now())
}

// --------------------
// Jobs and Recruiting
// --------------------

model Job {
  id           String        @id @default(cuid())
  title        String
  description  String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  applications Application[]
  // Times
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
}

model Application {
  id        String            @id @default(cuid())
  job       Job               @relation(fields: [jobId], references: [id])
  jobId     String
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  status    ApplicationStatus @default(draft)
  // Times
  updatedAt DateTime          @updatedAt
  createdAt DateTime          @default(now())

  @@unique([jobId, userId])
}

// --------------------
// CRM
// --------------------

model Contact {
  id         String        @id @default(cuid())
  // Contact info
  firstName  String?
  lastName   String?
  email      String?
  phone      Int?
  company    Company?      @relation(fields: [companyId], references: [id])
  companyId  String?
  address    String?
  addressTwo String?
  city       String?
  state      String?
  zipCode    Int?
  // Internal info
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  notes      ContactNote[]
  invoices   Invoice[]
  // Times
  updatedAt  DateTime      @updatedAt
  createdAt  DateTime      @default(now())
}

model ContactNote {
  id        String   @id @default(cuid())
  message   String
  contact   Contact  @relation(fields: [contactId], references: [id])
  contactId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // Times
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Company {
  id        String    @id @default(cuid())
  name      String
  website   String?
  phone     Int?
  contacts  Contact[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  // Times
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

// --------------------
// Helpdesk
// --------------------

model Ticket {
  id          Int             @id @default(autoincrement())
  title       String
  description String?
  status      Status          @default(open)
  user        User            @relation("UserTicket", fields: [userId], references: [id])
  userId      String
  assignee    User?           @relation("AssigneeTicket", fields: [assigneeId], references: [id])
  assigneeId  String?
  task        Task?           @relation(fields: [taskId], references: [id])
  taskId      String?
  comments    TicketComment[]
  // Times
  updatedAt   DateTime        @updatedAt
  createdAt   DateTime        @default(now())
}

model TicketComment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  Int
  message   String
  // Times
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Chat {
  id         String        @id @default(cuid())
  user       User          @relation("UserChat", fields: [userId], references: [id])
  userId     String
  assignee   User?         @relation("AssigneeChat", fields: [assigneeId], references: [id])
  assigneeId String?
  messages   ChatMessage[]
  // Times
  updatedAt  DateTime      @updatedAt
  createdAt  DateTime      @default(now())
}

model ChatMessage {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  viewed    Boolean  @default(false)
  message   String
  // Times
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// --------------------
// Project Management
// --------------------

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  tasks       Task[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  // Times
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Task {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      Status        @default(open)
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
  user        User          @relation("UserTask", fields: [userId], references: [id])
  userId      String
  assignee    User?         @relation("AssigneeTask", fields: [assigneeId], references: [id])
  assigneeId  String?
  tickets     Ticket[]
  comments    TaskComment[]
  // Times
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
}

model TaskComment {
  id        String   @id @default(cuid())
  message   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // Times
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Role {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  admin           Boolean  @default(false)
  employee        Boolean  @default(false)
  external        Boolean  @default(true)
  departmentAdmin Boolean  @default(false)
  financeAdmin    Boolean  @default(false)
  finance         Boolean  @default(false)
  hrAdmin         Boolean  @default(false)
  hr              Boolean  @default(false)
  recruitingAdmin Boolean  @default(false)
  recruiting      Boolean  @default(false)
  crmAdmin        Boolean  @default(false)
  crm             Boolean  @default(false)
  marketingAdmin  Boolean  @default(false)
  marketing       Boolean  @default(false)
  salesAdmin      Boolean  @default(false)
  sales           Boolean  @default(false)
  helpdeskAdmin   Boolean  @default(false)
  helpdesk        Boolean  @default(false)
  projectsAdmin   Boolean  @default(false)
  projects        Boolean  @default(false)
  // Times
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
}

// --------------------
// Enums
// --------------------

enum EmployeePayType {
  salary
  hourly
  contract
}

enum Frequency {
  daily
  weekly
  biweekly
  monthly
  bimonthly
  annually
}

enum Status {
  open
  pending
  closed
  archived
}

enum ApplicationStatus {
  draft
  submitted
  reviewed
  offered
  archived
}
